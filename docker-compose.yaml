version: '3.8'

services:
  # ðŸš€ Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=false"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=your-email@yourdomain.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_letsencrypt:/letsencrypt"
    networks:
      - evolution-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

  # ðŸš€ MinIO Storage
  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - evolution-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`${MINIO_DOMAIN}`)"
      - "traefik.http.routers.minio.entrypoints=websecure"
      - "traefik.http.routers.minio.tls.certresolver=letsencrypt"

  # ðŸš€ RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - evolution-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`${RABBITMQ_DOMAIN}`)"
      - "traefik.http.routers.rabbitmq.entrypoints=websecure"
      - "traefik.http.routers.rabbitmq.tls.certresolver=letsencrypt"

  # ðŸš€ Chatwoot API
  chatwoot:
    image: sendingtk/chatwoot:v3.12.6
    container_name: chatwoot
    restart: unless-stopped
    depends_on:
      - pgpool
      - redis-chatwoot
      - minio
      - rabbitmq
    env_file: .env
    environment:
      DATABASE_URL: postgres://chatwoot:${POSTGRES_PASSWORD}@pgpool:5432/${POSTGRES_DB}
      MINIO_ENDPOINT: http://${MINIO_DOMAIN}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
    networks:
      - evolution-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chatwoot.rule=Host(`${CHATWOOT_DOMAIN}`)"
      - "traefik.http.routers.chatwoot.entrypoints=websecure"
      - "traefik.http.routers.chatwoot.tls.certresolver=letsencrypt"
      - "traefik.docker.network=evolution-network"


  # ðŸš€ PostgreSQL Master
  postgres-master:
    image: bitnami/postgresql:15
    container_name: postgres-master
    restart: unless-stopped
    environment:
      POSTGRESQL_USERNAME: ${POSTGRES_USER}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRES_DB}
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: ${POSTGRES_REPL_USER}
      POSTGRESQL_REPLICATION_PASSWORD: ${POSTGRES_REPL_PASSWORD}
    networks:
      - evolution-network
    volumes:
      - postgres_master_data:/bitnami/postgresql
    healthcheck:  # âœ… ADDED HEALTHCHECK
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-h", "localhost"]
      interval: 10s
      retries: 5
      timeout: 5s


  # ðŸš€ PostgreSQL Connection Pooler (pgpool)
  pgpool:
    image: bitnami/pgpool:4
    container_name: pgpool
    restart: unless-stopped
    depends_on:
      postgres-master:
        condition: service_healthy  # âœ… ADDED THIS TO WAIT FOR HEALTHY POSTGRES-MASTER
    environment:
      PGPOOL_BACKEND_NODES: 0:postgres-master:5432
      PGPOOL_POSTGRES_USERNAME: ${POSTGRES_USER}
      PGPOOL_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPOOL_ENABLE_LOAD_BALANCING: yes

      # âœ… FIX: Add required credentials
      PGPOOL_ADMIN_USERNAME: pgpool_admin
      PGPOOL_ADMIN_PASSWORD: strong_admin_password
      PGPOOL_SR_CHECK_USER: ${POSTGRES_REPL_USER}
      PGPOOL_SR_CHECK_PASSWORD: ${POSTGRES_REPL_PASSWORD}
      PGPOOL_HEALTH_CHECK_USER: ${POSTGRES_USER}
      PGPOOL_HEALTH_CHECK_PASSWORD: ${POSTGRES_PASSWORD}
      
    ports:
      - "5432:5432"
    networks:
      - evolution-network


  # ðŸš€ Automated PostgreSQL Backup to MinIO
  pgbackup:
    image: kartoza/pg-backup:15-3.3
    container_name: pgbackup
    restart: on-failure
    depends_on:
      - pgpool
    environment:
      DUMPPREFIX: PG
      POSTGRES_HOST: pgpool
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASS: ${POSTGRES_PASSWORD}
      DBLIST: ${POSTGRES_DB}
      STORAGE_BACKEND: S3
      ACCESS_KEY_ID: ${BACKUP_ACCESS_KEY_ID}
      SECRET_ACCESS_KEY: ${BACKUP_SECRET_ACCESS_KEY}
      BUCKET: ${BACKUP_BUCKET}
      HOST_BASE: ${BACKUP_HOST_BASE}
      HOST_BUCKET: ${BACKUP_BUCKET}
      SSL_SECURE: ${BACKUP_SSL_SECURE}
      CRON_SCHEDULE: '0 3 * * *' # Runs daily at 3 AM
    networks:
      - evolution-network

  # âœ… Fix: Correct Indentation for redis-chatwoot
  redis-chatwoot:
    image: redis:alpine
    container_name: redis-chatwoot
    restart: always
    command: ["sh", "-c", "redis-server --requirepass \"$REDIS_PASSWORD\""]
    env_file: .env
    volumes:
      - ./database/chatwoot/redis:/data
    networks:
      - evolution-network

volumes:
  traefik_letsencrypt:
  postgres_master_data:
  minio_data:
  rabbitmq_data:

networks:
  evolution-network:
    driver: bridge
