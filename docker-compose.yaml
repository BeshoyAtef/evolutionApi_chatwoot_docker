version: '3.8'

services:
  # ðŸš€ Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=false"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=your-email@yourdomain.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_letsencrypt:/letsencrypt"
    networks:
      - evolution-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

  # ðŸš€ MinIO Storage
  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - evolution-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`${MINIO_DOMAIN}`)"
      - "traefik.http.routers.minio.entrypoints=websecure"
      - "traefik.http.routers.minio.tls.certresolver=letsencrypt"

  # ðŸš€ Chatwoot API
  chatwoot:
    image: sendingtk/chatwoot:v3.12.6
    container_name: chatwoot
    restart: unless-stopped
    depends_on:
      - postgres-chatwoot
      - redis-chatwoot
      - minio
    env_file: .env
    environment:
      MINIO_ENDPOINT: http://${MINIO_DOMAIN}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
    networks:
      - evolution-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chatwoot.rule=Host(`${CHATWOOT_DOMAIN}`)"
      - "traefik.http.routers.chatwoot.entrypoints=websecure"
      - "traefik.http.routers.chatwoot.tls.certresolver=letsencrypt"

  # ðŸš€ Evolution API (WhatsApp)
  evolution:
    image: atendai/evolution-api:v2.2.0
    container_name: evolution-api
    restart: unless-stopped
    env_file:
      - ./evolution-api/.env
    depends_on:
      - rabbitmq
      - minio
    volumes:
      - ./evolution-api/evolution_instances:/evolution/instances
    networks:
      - evolution-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.evolution.rule=Host(`${EVOLUTION_DOMAIN}`)"
      - "traefik.http.routers.evolution.entrypoints=websecure"
      - "traefik.http.routers.evolution.tls.certresolver=letsencrypt"

  # ðŸš€ PostgreSQL for Chatwoot
  postgres-chatwoot:
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${CHATWOOT_DB_NAME}
      POSTGRES_USER: ${CHATWOOT_DB_USER}
      POSTGRES_PASSWORD: ${CHATWOOT_DB_PASSWORD}
    networks:
      - evolution-network
    volumes:
      - chatwoot_postgres_data:/var/lib/postgresql/data

  # ðŸš€ PostgreSQL for Evolution API
  postgres-evolution:
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_DB: evolution
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: strongpassword
    networks:
      - evolution-network
    volumes:
      - evolution_postgres_data:/var/lib/postgresql/data

  # ðŸš€ pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chatwoot-pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: "demo@demo.com.br"
      PGADMIN_DEFAULT_PASSWORD: "PgAdmin2021!"
    networks:
      - evolution-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_DOMAIN}`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=letsencrypt"

  # ðŸš€ Redis for Chatwoot
  redis-chatwoot:
    image: redis:alpine
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    networks:
      - evolution-network
    volumes:
      - redis_data:/data

  # ðŸš€ RabbitMQ for Async Jobs
  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    networks:
      - evolution-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

volumes:
  traefik_letsencrypt:
  chatwoot_postgres_data:
  evolution_postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:

networks:
  evolution-network:
    driver: bridge
